// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model LogUser {
//   id        String   @id @default(cuid())
//   email     String   @unique
//   image     String?
//   password  String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  // Add other user-related fields as needed
  assets        Asset[] // Define a relationship to assets
  transactions  Transaction[]
  accounts      Account[]
  // sessions Session[]
  Investments   Investments[]
  Deposits      Deposits[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Asset {
  id        String   @id @default(uuid())
  symbol    String
  name      String
  balance   Float    @default(0) // Initial balance can be set as needed
  createdAt DateTime @default(now())

  // Establish a many-to-one relationship to users
  owner   User?  @relation(fields: [ownerId], references: [id])
  ownerId String

  transactions Transaction[]
}

model Transaction {
  id           String            @id @default(uuid())
  asset        Asset             @relation(fields: [assetId], references: [id])
  assetId      String
  amount       Float
  type         TransactionType
  status       TransactionStatus @default(PENDING)
  user         User              @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime          @default(now())
  Investements Investments[]
  Deposits     Deposits[]
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  INVESTMENT
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

model Deposits {
  id            String        @id @default(uuid())
  amount        Float
  token         String
  owner         User          @relation(fields: [ownerId], references: [id])
  ownerId       String
  status        DepositStatus @default(PENDING)
  transaction   Transaction   @relation(fields: [transactionId], references: [id])
  transactionId String
  createdAt     DateTime      @default(now())
}

enum DepositStatus {
  PENDING
  SUCCESS
  FAILED
}

model Investments {
  id            String           @id @default(uuid())
  amount        Float
  leverage      Int
  roi           Float
  owner         User             @relation(fields: [ownerId], references: [id])
  ownerId       String
  status        InvestmentStatus @default(STARTED)
  transaction   Transaction      @relation(fields: [transactionId], references: [id])
  transactionId String
  createdAt     DateTime         @default(now())
  closedAt      DateTime
}

enum InvestmentStatus {
  STARTED
  CANCELLED
  COMPLETED
}

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }
